<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-02T21:44:37+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Balpreet Singh</title><subtitle>Technical data engineering blogs. Techologies: Azure data services like data lake, blob, databricks, database, sql server, terraform, docker, kubernetes Tools: git, visual studio code, azure data studio Languages: SQL, Python, HCL Balpreet Singh, Senior Data Engineer</subtitle><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/bio-photo.jpg&quot;, &quot;bio&quot;=&gt;&quot;Senior Data Engineer&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;, &quot;url&quot;=&gt;&quot;https://khuranabal.github.io/&quot;}, {&quot;label&quot;=&gt;&quot;Linkedin&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-linkedin&quot;, &quot;url&quot;=&gt;&quot;https://www.linkedin.com/in/balpreet-singh-654705114&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/khuranabal?tab=repositories&quot;}]}</name></author><entry><title type="html">scala</title><link href="http://localhost:4000/blog/scala/" rel="alternate" type="text/html" title="scala" /><published>2022-01-28T17:27:00+01:00</published><updated>2022-01-28T17:27:00+01:00</updated><id>http://localhost:4000/blog/scala</id><content type="html" xml:base="http://localhost:4000/blog/scala/">&lt;p&gt;spark code can be written in different languages (scala, python, java, r), scala is hybrib, oops + functional.&lt;/p&gt;

&lt;p&gt;ways to write code:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;REPL: do directly in scala terminal, to view result intractively&lt;/li&gt;
  &lt;li&gt;IDE: eclipse, vs code etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-scala&quot;&gt;why scala&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;scala gives best performance as directly scala code can work in jvm, no seperate process required. However in python, a process intreacts with jvm, so an extra layer. In java, bulky code.&lt;/li&gt;
  &lt;li&gt;whenever new release happen it is avaialble in scala first then in other languages&lt;/li&gt;
  &lt;li&gt;spark is also written in scala&lt;/li&gt;
  &lt;li&gt;scripting way, concise code&lt;/li&gt;
  &lt;li&gt;functional, supports pure functions and immutable values. Natural fit for library design and data crunching thats why spark libraries are written in scala&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; function relates input to output like maths sqrt&lt;/p&gt;

&lt;h3 id=&quot;scala-basics&quot;&gt;scala basics&lt;/h3&gt;

&lt;h4 id=&quot;val--var&quot;&gt;val &amp;amp; var&lt;/h4&gt;

&lt;p&gt;val: constant, cannot be changed once declared
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val a: Int = 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;var: variable, can be changed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var a: Int = 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;type inference&lt;/strong&gt;: if data type is not mentioned then scala will infer data type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var a = 2&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;data-types&quot;&gt;data types&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Int&lt;/td&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;sequence of chars&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Boolean&lt;/td&gt;
      &lt;td&gt;true/false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Char&lt;/td&gt;
      &lt;td&gt;2 byte&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Double&lt;/td&gt;
      &lt;td&gt;8 bytes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Float&lt;/td&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Long&lt;/td&gt;
      &lt;td&gt;8 bytes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Byte&lt;/td&gt;
      &lt;td&gt;1 byte&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;after the value, have to give f in float and l in long&lt;/li&gt;
  &lt;li&gt;concat is done using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; can even do with mixed data types&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;interpolation&quot;&gt;interpolation&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;s interpolation (string interpolation)&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello $name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//output: 'hello abc'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;f interpolation&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.145&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value is $v%.2f&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//output: value is 3.14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;raw interpolation&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value is \n 10&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//it will give new line&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value is \n 10&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//it will give as is text with \n in print&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: in a block of code last statement is the return statement&lt;/p&gt;

&lt;h3 id=&quot;conditional&quot;&gt;conditional&lt;/h3&gt;

&lt;h4 id=&quot;if-else&quot;&gt;if else&lt;/h4&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ih&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;match&quot;&gt;match&lt;/h4&gt;

&lt;p&gt;it is like switch&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in else&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;loop&quot;&gt;loop&lt;/h3&gt;

&lt;h4 id=&quot;for-loop&quot;&gt;for loop&lt;/h4&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;while-loop&quot;&gt;while loop&lt;/h4&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;do-while-loop&quot;&gt;do while loop&lt;/h4&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;collections&quot;&gt;collections&lt;/h3&gt;

&lt;h4 id=&quot;array&quot;&gt;array&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;start from index 0&lt;/li&gt;
  &lt;li&gt;array is muttable&lt;/li&gt;
  &lt;li&gt;searching on index is fast&lt;/li&gt;
  &lt;li&gt;adding new element is inefficient&lt;/li&gt;
  &lt;li&gt;it is val but still values in array can be changed, if we try to assign new array then it will not allow&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;mkString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;list&quot;&gt;list&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;holds element in singly linked list&lt;/li&gt;
  &lt;li&gt;searching is not effecient&lt;/li&gt;
  &lt;li&gt;adding new element at start is effecient&lt;/li&gt;
  &lt;li&gt;lot of system defined functions are available to use in the list&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//it will give 1&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//it will give everything other then head, List(2,3,4) &lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;reverse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;adding a new element at start of list is effecient.
ex: 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10 :: b //will add 10 in start of list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tuple&quot;&gt;tuple&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;can treat like record in table&lt;/li&gt;
  &lt;li&gt;can have diff data type&lt;/li&gt;
  &lt;li&gt;it start with index 1&lt;/li&gt;
  &lt;li&gt;if tuple has only 2 element then it can treated as key value pair&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this will retrun the first element&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;range&quot;&gt;range&lt;/h4&gt;

&lt;p&gt;range of values&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this gives including 10 we can also use until to exculde the last vaule&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;set&quot;&gt;set&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;hold only distinct vaules&lt;/li&gt;
  &lt;li&gt;order is not maintained&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// it will save only distinct values un ordered&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;map&quot;&gt;map&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;collection of key value pair&lt;/li&gt;
  &lt;li&gt;with key can search value&lt;/li&gt;
  &lt;li&gt;hold unique key only if repeating the latest one will be used&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;def&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;only array is muttable others are immuttable in collections&lt;/li&gt;
  &lt;li&gt;Array, List, Tuple order is maintained&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pure-function&quot;&gt;pure function&lt;/h3&gt;

&lt;p&gt;if all three below properties satisfy then function is pure&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;input determines output. ex: dollar to rs conversion function accepts only dollar then it has to be depndent on some conversion if not passed then its impure function.&lt;/li&gt;
  &lt;li&gt;function does not change input vaule. ex: input to function if changed in the function then its impure&lt;/li&gt;
  &lt;li&gt;no side effects. ex: if println used in function then impure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;easy way to check if function is pure: referential transparency- if replacing the function with vaule do not impact result. ex: sqrt(4) where called can be replaced with 2&lt;/p&gt;

&lt;h3 id=&quot;first-class-function&quot;&gt;first class function&lt;/h3&gt;

&lt;p&gt;a. whatever we can do with values in traditional languages, same should be able to do with function, treat function like values.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this should return 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;b. should be able to pass function as param to function&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;c. return function from function&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: by default all function are first class in scala&lt;/p&gt;

&lt;h3 id=&quot;higher-order-func&quot;&gt;higher order func&lt;/h3&gt;

&lt;p&gt;function which either takes function as input parameter or returns another function as output&lt;/p&gt;

&lt;p&gt;ex: map function&lt;/p&gt;

&lt;p&gt;map: if n input rows then we get n output rows&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;a.map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;rows&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;anonymous-function&quot;&gt;anonymous function&lt;/h3&gt;

&lt;p&gt;without name function, same previous example can be done by below. mostly used with higher order func as shown in example map&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// similar to lambda in python&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: val is preffered over var because of immutability&lt;/p&gt;

&lt;h3 id=&quot;loop-vs-recursion-vs-tail-recursion&quot;&gt;loop vs recursion vs tail recursion&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;find factorial using loop&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//here we are mutating result and i, in scala val are preffered over var&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;find factorial using recursion&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//this solves problem for mutating but it takes memory to capture all entries until terminating condition reached. for large calculation it might go for out of memory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;find factorial using tail recursion&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//in this only the last statment is hold in memory as required data is only in last statement.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;statement-vs-expression&quot;&gt;statement vs expression&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;each line of code is statement&lt;/li&gt;
  &lt;li&gt;expression is line of code that returns something&lt;/li&gt;
  &lt;li&gt;in scala we only have expression no statements, so every line of code returns something&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;closure&quot;&gt;closure&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;in functional programming a function can return a function&lt;/li&gt;
  &lt;li&gt;in oops we can return an object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;object has data elements like variables and functions, in functional we have only functions. so how to get data elements, thats where we use closure, in function it can have local variable which can be used thats called closure.&lt;/p&gt;

&lt;!---

### Type system

Any

AnyVal:

Byte
Short
Int
Long
Float
Double

Unit: example println return this
Boolean
Char

AnyRef

List
Seq
Tuple

String


Null: is valid for only AnyRef
Nothing: 


### operator

there is no operator in scala only methods

1 + 2

here + is method, it is short of a.+(b) can be done as a + b
we can see all methods available by a.tab


### placeholder syntax

val a = 1 to 100
a.map((x:Int) =&gt; x * 2)

here always we have one input param then we can remove it and replace with placeholder syntax

a.map(_ * 2)

### partially applied functions
this is an act of creating brand new functins by fixing one or more parameters ina func

ex:
def func1(x: Double, y: Double) = {x/y}
func1(10,3)
val inverse = func1(1, _: Double)
inverse(10)


ex:
def sum(x: Int, y: Int, f: Int =&gt; Int) = {
  f(x) + f(y)
}

sum(2,3,x=&gt;x*x)
sum(2,3,x=&gt;x*x*x)

val sum_of_squares = sum(_:Int, _Int, x=&gt;x*x)
sum_of_sqaues(2,2)

### function currying
syntactic sugar, similar to partially applied function

def sum(f:Int =&gt; Int)(x:Int, y:Int) = {
  f(x) + f(y)
}

val sum_of_sqaues = sum(x=&gt;x*x)_
sum(2,2)
---&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/bio-photo.jpg&quot;, &quot;bio&quot;=&gt;&quot;Senior Data Engineer&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;, &quot;url&quot;=&gt;&quot;https://khuranabal.github.io/&quot;}, {&quot;label&quot;=&gt;&quot;Linkedin&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-linkedin&quot;, &quot;url&quot;=&gt;&quot;https://www.linkedin.com/in/balpreet-singh-654705114&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/khuranabal?tab=repositories&quot;}]}</name></author><category term="blog" /><category term="scala" /><summary type="html">spark code can be written in different languages (scala, python, java, r), scala is hybrib, oops + functional.</summary></entry><entry><title type="html">time complexity</title><link href="http://localhost:4000/blog/time-complexity/" rel="alternate" type="text/html" title="time complexity" /><published>2022-01-28T17:27:00+01:00</published><updated>2022-01-28T17:27:00+01:00</updated><id>http://localhost:4000/blog/time-complexity</id><content type="html" xml:base="http://localhost:4000/blog/time-complexity/">&lt;p&gt;A way to calculate time consumed by an algorithm, as a function of input.&lt;/p&gt;

&lt;h3 id=&quot;example1&quot;&gt;example1&lt;/h3&gt;

&lt;p&gt;lets say we have an array &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a = 1 5 3 7 2&lt;/code&gt;
Q: find element at index 2?
A: as we can do array get (random access) at index, time complexity will be O(1)&lt;/p&gt;

&lt;h3 id=&quot;example2&quot;&gt;example2&lt;/h3&gt;

&lt;p&gt;lets say we have an array &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a = 1 5 3 7 2&lt;/code&gt;
Q: find 3
A: if we search from first to last then best case we get is first element then time complextity O(1) and worst case it can be last element then time complexity O(n).
Time complexity is taken considering worst case scenario.&lt;/p&gt;

&lt;h3 id=&quot;example3&quot;&gt;example3&lt;/h3&gt;

&lt;p&gt;lets say we have sorted array &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a = 1 2 3 5 7&lt;/code&gt; 
Q: find 3
A: then we can do binary search to improve time complexity
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;middle element = (lowest index + highest index) / 2&lt;/code&gt;
check middle element and based on it go left or right and repeat. So, here will take O(3) but in previous way it would have taken O(5), so here O(logn).
Why logn: as if there were 1024 elements in array and we did binary search it will lead to result in 10 searches log 1024 = 10 (with base 2 in log calculation)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:
As only max can be considered.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In case time complexity is n + log n then we can say it is n&lt;/li&gt;
  &lt;li&gt;In case time complexity is n2 + n + log n then we can say its n2&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example4&quot;&gt;example4&lt;/h3&gt;
&lt;p&gt;Q: 1000 elements find if duplicate is present
A: Options-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;brute force: check all (one by one) with remaining starting from first element, first go check all n-1, second go start from 2nd and check remaining n-2, and soon. So it will be O(n2) complexity.&lt;/li&gt;
  &lt;li&gt;sort first: best sorting has complexity of O(nlogn) quicksort and merge sort, then we can start from first element and if second element is match then duplicate or else check 2nd and third element this way we will scan full array only once. complexity will be n, so, complexity will be O(nlogn) + O(n), equivalent to O(nlogn)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;example5&quot;&gt;example5&lt;/h3&gt;
&lt;p&gt;Q: 1000 elements find element which repeats maximum number of times
A: options-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;brute force: same as above O(n2)&lt;/li&gt;
  &lt;li&gt;sort first: complexity nlogn for sort, then in single scan we can now how many times each element occurs. So again complexity nlogn + n equivalent to nlogn&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;example6&quot;&gt;example6&lt;/h3&gt;
&lt;p&gt;Q: 1000 elements, 1 missing in the range 1-1000
A: options-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;brute force: O(n2)&lt;/li&gt;
  &lt;li&gt;sort first: nlogn, then in one scan we can find missing element so nlogn&lt;/li&gt;
  &lt;li&gt;calculate sum of first 1000 numbers, then get sum of all elements in array O(n) then subtract and find the missing number, complexity O(n)&lt;/li&gt;
&lt;/ol&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/bio-photo.jpg&quot;, &quot;bio&quot;=&gt;&quot;Senior Data Engineer&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;, &quot;url&quot;=&gt;&quot;https://khuranabal.github.io/&quot;}, {&quot;label&quot;=&gt;&quot;Linkedin&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-linkedin&quot;, &quot;url&quot;=&gt;&quot;https://www.linkedin.com/in/balpreet-singh-654705114&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/khuranabal?tab=repositories&quot;}]}</name></author><category term="blog" /><category term="time complexity" /><category term="data structures" /><summary type="html">A way to calculate time consumed by an algorithm, as a function of input.</summary></entry><entry><title type="html">cassandra</title><link href="http://localhost:4000/blog/cassandra/" rel="alternate" type="text/html" title="cassandra" /><published>2022-01-26T15:25:00+01:00</published><updated>2022-01-26T15:25:00+01:00</updated><id>http://localhost:4000/blog/cassandra</id><content type="html" xml:base="http://localhost:4000/blog/cassandra/">&lt;h3 id=&quot;features&quot;&gt;features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;distributed column oriented database&lt;/li&gt;
  &lt;li&gt;highly performant&lt;/li&gt;
  &lt;li&gt;scalable&lt;/li&gt;
  &lt;li&gt;transactional&lt;/li&gt;
  &lt;li&gt;low latency retrieval&lt;/li&gt;
  &lt;li&gt;availibilty and partition tolerance guarentees with tunable consistency&lt;/li&gt;
  &lt;li&gt;no master, multi master&lt;/li&gt;
  &lt;li&gt;decentralized architecure&lt;/li&gt;
  &lt;li&gt;highly available&lt;/li&gt;
  &lt;li&gt;for communication among peers use gossip protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example: where eventual consistency is fine like social media comments/likes&lt;/p&gt;

&lt;h3 id=&quot;tunable-consistency&quot;&gt;tunable consistency&lt;/h3&gt;

&lt;p&gt;In default setup, it uses eventual consistency. Below are the steps which will be performed when a request is submitted by client to cassandra.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;client send request to get some data&lt;/li&gt;
  &lt;li&gt;request is received by a machine in cassandra cluster lets say node2&lt;/li&gt;
  &lt;li&gt;node2 will get data from the nodes which have data lets say node1&lt;/li&gt;
  &lt;li&gt;node2 will return the response to client&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But we can tune consistency to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;check all node: all machines in cluster agrees on the same result&lt;/li&gt;
  &lt;li&gt;check quorum: certain number of machine agrees on the same result&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hbase-vs-cassandra&quot;&gt;hbase vs cassandra&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hbase&lt;/td&gt;
      &lt;td&gt;cassandra&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nosql&lt;/td&gt;
      &lt;td&gt;nosql&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;scalable&lt;/td&gt;
      &lt;td&gt;scalable&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;transactional&lt;/td&gt;
      &lt;td&gt;transactional&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;low latency&lt;/td&gt;
      &lt;td&gt;low latency&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;master slave architecture&lt;/td&gt;
      &lt;td&gt;no single master, muti master&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CP guarentee&lt;/td&gt;
      &lt;td&gt;AP guarentee, with tunable consistency&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;runs on hadoop cluster&lt;/td&gt;
      &lt;td&gt;dedicated cluster required&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: cassandra has its own query language cql, its similar to sql&lt;/p&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/bio-photo.jpg&quot;, &quot;bio&quot;=&gt;&quot;Senior Data Engineer&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;, &quot;url&quot;=&gt;&quot;https://khuranabal.github.io/&quot;}, {&quot;label&quot;=&gt;&quot;Linkedin&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-linkedin&quot;, &quot;url&quot;=&gt;&quot;https://www.linkedin.com/in/balpreet-singh-654705114&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/khuranabal?tab=repositories&quot;}]}</name></author><category term="blog" /><category term="cassandra" /><category term="nosql" /><category term="hbase" /><category term="database" /><summary type="html">features</summary></entry><entry><title type="html">hive for processing and hbase for low latency read</title><link href="http://localhost:4000/blog/hive-hbase/" rel="alternate" type="text/html" title="hive for processing and hbase for low latency read" /><published>2022-01-26T15:25:00+01:00</published><updated>2022-01-26T15:25:00+01:00</updated><id>http://localhost:4000/blog/hive-hbase</id><content type="html" xml:base="http://localhost:4000/blog/hive-hbase/">&lt;p&gt;creating table which can be accessed both by hive and hbase, this is done in cases where we require quick (low latency) searches and faster processing of data. In this case we can use hive for processing and hbase for quick searches with same underlying table.&lt;/p&gt;

&lt;p&gt;steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;create table in hive
    &lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;create table integration (a int, b string);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;load data in hive table
    &lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;load data local inpath '/path/to/data/data.csv'
overwrite into table integration;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;create hive-hbase table
    &lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;create table hive_table(key int, value string) stored by
'org.apache.hadoop.hive.hbase.HBaseStorageHandler' with
SERDEPROPERTIES (&quot;hbase.table.name&quot;=&quot;hbase_table&quot;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;insert data in hive-hbase table
    &lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;insert overwrite table hive_table select * from integration;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;verify data from hive
    &lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;select * from hive_table;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;verify data from hbase
    &lt;pre&gt;&lt;code class=&quot;language-hbase&quot;&gt;scan 'hbase_table'
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: in hive we can have duplicate keys but in hbase we can have only unique keys so when we load data in the table which is hive-hbase then it updates the same key with new timestamp and by default latest one will be shown.&lt;/p&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/bio-photo.jpg&quot;, &quot;bio&quot;=&gt;&quot;Senior Data Engineer&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;, &quot;url&quot;=&gt;&quot;https://khuranabal.github.io/&quot;}, {&quot;label&quot;=&gt;&quot;Linkedin&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-linkedin&quot;, &quot;url&quot;=&gt;&quot;https://www.linkedin.com/in/balpreet-singh-654705114&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/khuranabal?tab=repositories&quot;}]}</name></author><category term="blog" /><category term="hive" /><category term="nosql" /><category term="hbase" /><category term="database" /><summary type="html">creating table which can be accessed both by hive and hbase, this is done in cases where we require quick (low latency) searches and faster processing of data. In this case we can use hive for processing and hbase for quick searches with same underlying table.</summary></entry><entry><title type="html">cap theorem</title><link href="http://localhost:4000/blog/cap/" rel="alternate" type="text/html" title="cap theorem" /><published>2022-01-26T15:10:00+01:00</published><updated>2022-01-26T15:10:00+01:00</updated><id>http://localhost:4000/blog/cap</id><content type="html" xml:base="http://localhost:4000/blog/cap/">&lt;p&gt;It is for distributed databases. And says that we can have only two out of three gurantees.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C(Consistency): every node returns same recent data&lt;/li&gt;
  &lt;li&gt;A(Availibility): every request gets response&lt;/li&gt;
  &lt;li&gt;P(Partition tolerance): system functions despite of partition/network failure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Options&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CA: rdbms&lt;/li&gt;
  &lt;li&gt;CP: single master or active/passive master, distributed database. ex:hbase&lt;/li&gt;
  &lt;li&gt;AP: muti master, distributed database. ex:cassandara, cosmosdb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In distributed systems we deal with multiple machine so we would require partition tolerance so the only thing we have to choose is either consistency/availibilty.&lt;/p&gt;

&lt;h3 id=&quot;cp&quot;&gt;CP&lt;/h3&gt;

&lt;p&gt;In this case we can recevice timeout from the application as availibilty will not be guranteed.&lt;/p&gt;

&lt;h3 id=&quot;ap&quot;&gt;AP&lt;/h3&gt;

&lt;p&gt;In this case request receives newest version of data available as consistency will not be guranteed.&lt;/p&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/bio-photo.jpg&quot;, &quot;bio&quot;=&gt;&quot;Senior Data Engineer&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;, &quot;url&quot;=&gt;&quot;https://khuranabal.github.io/&quot;}, {&quot;label&quot;=&gt;&quot;Linkedin&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-linkedin&quot;, &quot;url&quot;=&gt;&quot;https://www.linkedin.com/in/balpreet-singh-654705114&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/khuranabal?tab=repositories&quot;}]}</name></author><category term="blog" /><category term="cap theorem" /><category term="nosql" /><category term="database" /><summary type="html">It is for distributed databases. And says that we can have only two out of three gurantees.</summary></entry><entry><title type="html">hbase</title><link href="http://localhost:4000/blog/hbase/" rel="alternate" type="text/html" title="hbase" /><published>2022-01-21T17:01:00+01:00</published><updated>2022-01-21T17:01:00+01:00</updated><id>http://localhost:4000/blog/hbase</id><content type="html" xml:base="http://localhost:4000/blog/hbase/">&lt;h3 id=&quot;rdbms-properties&quot;&gt;rdbms properties&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;structured&lt;/li&gt;
  &lt;li&gt;random access&lt;/li&gt;
  &lt;li&gt;low latency&lt;/li&gt;
  &lt;li&gt;ACID
    &lt;ul&gt;
      &lt;li&gt;Atomic: full transaction either completes or fail&lt;/li&gt;
      &lt;li&gt;Consistency: updates should not violate constraints&lt;/li&gt;
      &lt;li&gt;Isolation: multiple concurrent sessions can work on database in some sequence using locking&lt;/li&gt;
      &lt;li&gt;Durability: data is stored and recoverable even after failure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;limitations-of-hadoop&quot;&gt;limitations of hadoop&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;unstructured data&lt;/li&gt;
  &lt;li&gt;no random access&lt;/li&gt;
  &lt;li&gt;high latency&lt;/li&gt;
  &lt;li&gt;no ACID compliance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bigtablehbase&quot;&gt;bigtable/hbase&lt;/h3&gt;

&lt;p&gt;bigtable paper is published by google, it is distributed storage system for structured data. hbase is implementation of the same.&lt;/p&gt;

&lt;p&gt;hbase is distributed database management system on top of hadoop. So is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;distributed&lt;/li&gt;
  &lt;li&gt;scalable&lt;/li&gt;
  &lt;li&gt;fault tolerant&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hbase-properties&quot;&gt;hbase properties&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;loose structured: as each row can can different number of columns&lt;/li&gt;
  &lt;li&gt;low latency: uses row keys to fetch data&lt;/li&gt;
  &lt;li&gt;random access: uses row keys to fetch data&lt;/li&gt;
  &lt;li&gt;somewhat ACID: as it provides ACID at row level only, not if multiple rows are updated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It provides batch processing using mapreduce and real time processing using row keys.&lt;/p&gt;

&lt;h3 id=&quot;storage-in-hbase&quot;&gt;storage in hbase&lt;/h3&gt;

&lt;p&gt;It stores data in columnar format as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hbase/hbase.png&quot; alt=&quot;hbase&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sparse data: In case there is no data for some of the columns then those columns will be skipped while storing&lt;/li&gt;
  &lt;li&gt;dynamic attributes: can have data with more or less columns&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hbase-vs-rdbms&quot;&gt;hbase vs rdbms&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;rdbms&lt;/td&gt;
      &lt;td&gt;hbase&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;data is arranged in rows and columns&lt;/td&gt;
      &lt;td&gt;data is in columnar format&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sql&lt;/td&gt;
      &lt;td&gt;nosql&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;supports groupping, joins, etc&lt;/td&gt;
      &lt;td&gt;supports only CRUD&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;normalized data to reduce redundancy&lt;/td&gt;
      &lt;td&gt;denaormalized (self contained) to reduce disk seek&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ACID compliant&lt;/td&gt;
      &lt;td&gt;ACID compliant at row level&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2 dimiensional (row &amp;amp; column)&lt;/td&gt;
      &lt;td&gt;4 dimensional&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;4-dimensional-model-in-hbase&quot;&gt;4 dimensional model in hbase&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;row key
    &lt;ul&gt;
      &lt;li&gt;uniquely identifies row&lt;/li&gt;
      &lt;li&gt;represented internally as byte array&lt;/li&gt;
      &lt;li&gt;sorted in asc order&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;column family
    &lt;ul&gt;
      &lt;li&gt;all rows have same set of column family&lt;/li&gt;
      &lt;li&gt;setup at definition&lt;/li&gt;
      &lt;li&gt;can have different columns for different rows&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;column
    &lt;ul&gt;
      &lt;li&gt;exist in one of the column family&lt;/li&gt;
      &lt;li&gt;can be dynamic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;timestamp
    &lt;ul&gt;
      &lt;li&gt;used for versioning&lt;/li&gt;
      &lt;li&gt;vaule for old version can also be accessed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below shows all the four dimesnions and how data is stored. Like for col2 all the historic vaules will be stored with the timestamp and by default it gives latest but can be queried old data as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hbase/hbase-storage.png&quot; alt=&quot;hbase storage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all data is stored in byte array in form of bytes in hbase, there is no concept of data types in it&lt;/li&gt;
  &lt;li&gt;row keys are stored in sorted asc order, so as binary search can be done to find value&lt;/li&gt;
  &lt;li&gt;column families are fix and defined when creating table&lt;/li&gt;
  &lt;li&gt;columns can be more or less&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hbase-architecture&quot;&gt;hbase architecture&lt;/h3&gt;

&lt;p&gt;hbase table is collection of rows and columns that are sorted based on row key. This table is distributed according to fix size, each portion of table is called region.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hbase/hbase-architecture.png&quot; alt=&quot;hbase architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;region&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;sorted data is stored based on row keys&lt;/li&gt;
  &lt;li&gt;column families are stored in seperate files&lt;/li&gt;
  &lt;li&gt;assume 1 million rows in table and we have 4 regions then .25 million will go in each region&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;region server&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;can have multiple region stored in one region server&lt;/li&gt;
  &lt;li&gt;if 4 data nodes and typically 4 region server is good practice&lt;/li&gt;
  &lt;li&gt;each region server contain wal, block cache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;wal&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;write ahead log, also known as hlog&lt;/li&gt;
  &lt;li&gt;in case of region server failure, and data is still in memstore. In order to prevent data loss, log is written to permanent store (hdfs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;block cache&lt;/strong&gt;: whenever read is done data is cached in memory, so next read can be done directly by cache&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;memstore&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;every insert is appended in memstore, after threshold is reached then data is flushed to disk with a new file created and this new file is called hfile&lt;/li&gt;
  &lt;li&gt;for each region there will be memstore per column family&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;zookeeper&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;it is cordinating service for various distributed system&lt;/li&gt;
  &lt;li&gt;hold location for metatable&lt;/li&gt;
  &lt;li&gt;every system send heartbeat&lt;/li&gt;
  &lt;li&gt;metatable hold mapping of rowkey, region and region servers&lt;/li&gt;
  &lt;li&gt;metatable is present on one of region server and zoopkeep knows which region server hold it.&lt;/li&gt;
  &lt;li&gt;in case of hmaster failue, zookeeper assign other master as new master&lt;/li&gt;
  &lt;li&gt;in case region server fails, zookeeper notify hmaster then hmaster reassigns regions of failed region server to other region server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;hmaster&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;is master and region servers are slaves&lt;/li&gt;
  &lt;li&gt;can have one or more master node but only one will be active at a time&lt;/li&gt;
  &lt;li&gt;assign region servers&lt;/li&gt;
  &lt;li&gt;in case of failure/load it will balance among region servers&lt;/li&gt;
  &lt;li&gt;perform admin stuff like ddl (creating/deleting tables)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;hfiles&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;stored in hdfs&lt;/li&gt;
  &lt;li&gt;stores hbase table data as sorted key-value pairs&lt;/li&gt;
  &lt;li&gt;immutable&lt;/li&gt;
  &lt;li&gt;large in size depends on memstore flush size&lt;/li&gt;
  &lt;li&gt;stores data as set of blocks, which helps reading particular block&lt;/li&gt;
  &lt;li&gt;default block size 64KB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example: consider hfile of 250MB and block size of 64KB, then just 64KB need to be scanned if we search for a particular row key, And also in that block, binary search is applied to get particular row as data is stored sorted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;metatable&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;stores location of regions along with region servers&lt;/li&gt;
  &lt;li&gt;helps user identify the region server and its corresponding regions where specific range data is stored&lt;/li&gt;
  &lt;li&gt;stored in one of region server and its location is stored in zookeeper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;wal and block cache is one per region server&lt;/li&gt;
  &lt;li&gt;client intreacts directly with the region server to perform read/write operations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;readwrite-operation&quot;&gt;read/write operation&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hbase/hbase-read-write.png&quot; alt=&quot;hbase read write&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;read&quot;&gt;read&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;region server checks the block cache.&lt;/li&gt;
  &lt;li&gt;if not in block cache them memstore is checked&lt;/li&gt;
  &lt;li&gt;if not in memstore then hfile&lt;/li&gt;
  &lt;li&gt;in hfile particular block will be scanned based on row key and in order to find row key binary search is done in the block&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;write&quot;&gt;write&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;data is first written in wal&lt;/li&gt;
  &lt;li&gt;then to memstore&lt;/li&gt;
  &lt;li&gt;once memstore is filled, content is flushed to hdfs in new hfile&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;compaction&quot;&gt;compaction&lt;/h3&gt;

&lt;p&gt;flush to hfile from memstore create multiple hfiles, especially on frequent write, which leads to slow read. To solve this we can use compactions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;minor&lt;/strong&gt;: smaller hfiles are processed and rewritten into few larger files&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;major&lt;/strong&gt;: all hfiles are picked and rewritten into single large hfile&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: major compaction is more resource intensive&lt;/p&gt;

&lt;h3 id=&quot;data-updatedelete&quot;&gt;data update/delete&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;update is done based on timestamp&lt;/li&gt;
  &lt;li&gt;versions are maintained&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;delete&lt;/strong&gt;:
delete is special type of update where vaules of deleted data is not deleted immediatly rather are marked by assigning tombstone marker. Request to read the deleted data then returns null because of tombstone marker which identifyies that data is deleted.&lt;/p&gt;

&lt;p&gt;Reason for this is hfiles are immutable as these are hdfs files. All vaules with tombstone markers are deleted in next major compaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: querying hbase has different commands which are not like sql, apache phoenix provides sql like interface on top of hbase.&lt;/p&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/bio-photo.jpg&quot;, &quot;bio&quot;=&gt;&quot;Senior Data Engineer&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;, &quot;url&quot;=&gt;&quot;https://khuranabal.github.io/&quot;}, {&quot;label&quot;=&gt;&quot;Linkedin&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-linkedin&quot;, &quot;url&quot;=&gt;&quot;https://www.linkedin.com/in/balpreet-singh-654705114&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/khuranabal?tab=repositories&quot;}]}</name></author><category term="blog" /><category term="hbase" /><category term="nosql" /><category term="database" /><summary type="html">rdbms properties</summary></entry><entry><title type="html">slowly changing dimensions</title><link href="http://localhost:4000/blog/scd/" rel="alternate" type="text/html" title="slowly changing dimensions" /><published>2022-01-20T16:42:00+01:00</published><updated>2022-01-20T16:42:00+01:00</updated><id>http://localhost:4000/blog/scd</id><content type="html" xml:base="http://localhost:4000/blog/scd/">&lt;p&gt;It is for dimension tables where changes are less in source rdbms which we want to get into datawarehouse or hdfs&lt;/p&gt;

&lt;h3 id=&quot;type-of-scd&quot;&gt;Type of SCD&lt;/h3&gt;

&lt;h4 id=&quot;scd-type-1&quot;&gt;SCD Type 1&lt;/h4&gt;

&lt;p&gt;History is not maintained, data is overwritten.&lt;/p&gt;

&lt;h4 id=&quot;scd-type-2&quot;&gt;SCD Type 2&lt;/h4&gt;

&lt;p&gt;Maintain history. It can be done in below three ways, lets take emaple of product data. All products are stored in products table then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;version&lt;/strong&gt;: maintain multiple version (increasing int value) of same product latest version is the latest details of the product&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;flag&lt;/strong&gt;: keep flag representing latest details of the product&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;effective date&lt;/strong&gt;: maintain start date and end date, this way we can keep track of the product details over period of time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/bio-photo.jpg&quot;, &quot;bio&quot;=&gt;&quot;Senior Data Engineer&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;, &quot;url&quot;=&gt;&quot;https://khuranabal.github.io/&quot;}, {&quot;label&quot;=&gt;&quot;Linkedin&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-linkedin&quot;, &quot;url&quot;=&gt;&quot;https://www.linkedin.com/in/balpreet-singh-654705114&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/khuranabal?tab=repositories&quot;}]}</name></author><category term="blog" /><category term="scd" /><category term="datawarehouse" /><summary type="html">It is for dimension tables where changes are less in source rdbms which we want to get into datawarehouse or hdfs</summary></entry><entry><title type="html">hive features</title><link href="http://localhost:4000/blog/hive-features/" rel="alternate" type="text/html" title="hive features" /><published>2022-01-19T16:43:00+01:00</published><updated>2022-01-19T16:43:00+01:00</updated><id>http://localhost:4000/blog/hive-features</id><content type="html" xml:base="http://localhost:4000/blog/hive-features/">&lt;h3 id=&quot;hive-server--thrift-server&quot;&gt;hive server / thrift server&lt;/h3&gt;

&lt;p&gt;Its like bridge service, where code can be written in any language and executed remotely on hive using apache thrift server/service.&lt;/p&gt;

&lt;p&gt;In hive context, we can write code in java to query on hive using thrift service.&lt;/p&gt;

&lt;h3 id=&quot;msck-repair&quot;&gt;msck repair&lt;/h3&gt;

&lt;p&gt;Assume we have hive external table, and partitions are added to the directory. In this case metadata in hive will not be updated automatically. We have to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msck&lt;/code&gt; to update metadata.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;create external table
    &lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;create external table v1(a int, b int)
partitioned by (state char(2))
location '/data';
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;create directory
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hadoop fs &lt;span class=&quot;nt&quot;&gt;-mkdir&lt;/span&gt; /data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;add couple of partitions data in directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;check partitions, it will not show any partitions
    &lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;show partitions v1;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;use below command to build metadata
    &lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;msck repair table v1;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;check partitions again, it will show partitions added
    &lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;show partitions v1;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;no_drop-feature&quot;&gt;no_drop feature&lt;/h3&gt;

&lt;p&gt;We can enable no drop feature so as it is protected by accidental drop command. Same way we can disable if required.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;enable no drop: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alter table v1 enable no_drop;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;test drop, it will error out: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop table v1;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It can even be enabled on particular partition.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alter table v1 partition (country='DK') enable no_drop;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;offline-feature&quot;&gt;offline feature&lt;/h3&gt;

&lt;p&gt;We can enable offline feature so as table will be restricted to be queried.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alter table v1 enable offline;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;skip-rows&quot;&gt;skip rows&lt;/h3&gt;

&lt;p&gt;To skip n top rows, we have to create table with special tblproperties.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;create table v2(a int, b int)
tblproperties(&quot;skip.header.line.count&quot;=&quot;3&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: same way we can skip footer property is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;skip.footer.line.count&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;immutable-feature&quot;&gt;immutable feature&lt;/h3&gt;

&lt;p&gt;If enabled then we cannot change data like append or modify, it only allows data to be loaded one time. However we can overwrite.&lt;/p&gt;

&lt;p&gt;Property to enable: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tblproperties(&quot;immutable&quot;=&quot;true&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;drop-vs-truncate-vs-purge&quot;&gt;drop vs truncate vs purge&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;drop&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for managed table data and metadata both are deleted&lt;/li&gt;
  &lt;li&gt;for external table only metedata is deleted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;truncate&lt;/strong&gt;: all the data is deleted, metadata will not be deleted&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;purge&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if set to true, data will be permanently deleted&lt;/li&gt;
  &lt;li&gt;if set to false, data can be recovered&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;empty-string&quot;&gt;empty string&lt;/h3&gt;

&lt;p&gt;When value is missing in the column of dataset in a file, it is empty string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There is table property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tblproperties(&quot;serialization.null.format&quot;=&quot;&quot;)&lt;/code&gt; to convert any empty value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;dfs-command-from-hive&quot;&gt;dfs command from hive&lt;/h3&gt;

&lt;p&gt;We can run below command from terminal to check files in hdfs.&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hadoop fs &lt;span class=&quot;nt&quot;&gt;-ls&lt;/span&gt; /user/username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we are connected to hive then we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dfs&lt;/code&gt;command to check files.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;dfs -ls /user/username;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;executing-linux-command-from-hive&quot;&gt;executing linux command from hive&lt;/h3&gt;

&lt;p&gt;It can be executed by prefixing command with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!ls /home/user;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;hivevar&quot;&gt;hivevar&lt;/h3&gt;

&lt;p&gt;It is used to have variable in hive. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;set hivevar:var1=1;
select * from v1 where a=${var1};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;print-headers-along-with-data&quot;&gt;print headers along with data&lt;/h3&gt;

&lt;p&gt;Use below to print header in output from hive.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set hive.cli.prnt.header=true;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;cartesian-product&quot;&gt;cartesian product&lt;/h3&gt;

&lt;p&gt;Join all rows one table with all rows of other table.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select * from t1,t2;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;plan-of-queries&quot;&gt;plan of queries&lt;/h3&gt;

&lt;p&gt;To check plan of queries below can be used:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN select * from t1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN EXTENDED select * from t1;&lt;/code&gt;&lt;/p&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/bio-photo.jpg&quot;, &quot;bio&quot;=&gt;&quot;Senior Data Engineer&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;, &quot;url&quot;=&gt;&quot;https://khuranabal.github.io/&quot;}, {&quot;label&quot;=&gt;&quot;Linkedin&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-linkedin&quot;, &quot;url&quot;=&gt;&quot;https://www.linkedin.com/in/balpreet-singh-654705114&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/khuranabal?tab=repositories&quot;}]}</name></author><category term="blog" /><category term="hive" /><summary type="html">hive server / thrift server</summary></entry><entry><title type="html">hive optimizations</title><link href="http://localhost:4000/blog/hive-optimizations/" rel="alternate" type="text/html" title="hive optimizations" /><published>2022-01-18T16:56:00+01:00</published><updated>2022-01-18T16:56:00+01:00</updated><id>http://localhost:4000/blog/hive-optimizations</id><content type="html" xml:base="http://localhost:4000/blog/hive-optimizations/">&lt;h3 id=&quot;vectorization&quot;&gt;Vectorization&lt;/h3&gt;

&lt;p&gt;It is hive feature which reduces cpu usage for query execution. Usually it processes one row at a time. Vectorized query streamlines operations by processing 1024 rows at a time like bacth of rows.&lt;/p&gt;

&lt;p&gt;To use vectorization data should be in orc format. And need to enable below parameter, it is not enabled by default.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set hive.vectorized.execution.enabled = true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;create table: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create table v1(a int, b int) stored as orc;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;enable vectorization&lt;/li&gt;
  &lt;li&gt;expalin query &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;explain select * from v1;&lt;/code&gt; We should be able to see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execution mode: vectorized&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;change-hive-engine&quot;&gt;Change hive engine&lt;/h3&gt;

&lt;p&gt;It supports three engines. We can check which one is in use by below command.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set hive.execution.engine&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set hive.execution.engine=spark;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mr&lt;/li&gt;
  &lt;li&gt;tez&lt;/li&gt;
  &lt;li&gt;spark&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: mr is defult selected&lt;/p&gt;

&lt;h3 id=&quot;udf&quot;&gt;UDF&lt;/h3&gt;

&lt;p&gt;UDF’s are not very optimized. And filters in hive are evaluated from left to right so in case we have udf then we should put that in last in the filter. Example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where col1=1 and udf_name(col2)=2&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;cost-based-optimization-cbo&quot;&gt;cost based optimization (CBO)&lt;/h3&gt;

&lt;p&gt;It is open source and generates effecient plan by checking cost of query, which is collected by ANALYZE statements. And it is enabled by default. Properties related to it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hive&quot;&gt;set hive.cbo.enable
set hive.compute.query.using.stats
set hive.stats.fetch.column.stats
set hive.stats.fetch.partition.stats
&lt;/code&gt;&lt;/pre&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/bio-photo.jpg&quot;, &quot;bio&quot;=&gt;&quot;Senior Data Engineer&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;, &quot;url&quot;=&gt;&quot;https://khuranabal.github.io/&quot;}, {&quot;label&quot;=&gt;&quot;Linkedin&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-linkedin&quot;, &quot;url&quot;=&gt;&quot;https://www.linkedin.com/in/balpreet-singh-654705114&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/khuranabal?tab=repositories&quot;}]}</name></author><category term="blog" /><category term="hive" /><category term="optimization" /><summary type="html">Vectorization</summary></entry><entry><title type="html">compression in hadoop</title><link href="http://localhost:4000/blog/compression-in-hadoop/" rel="alternate" type="text/html" title="compression in hadoop" /><published>2022-01-18T16:29:00+01:00</published><updated>2022-01-18T16:29:00+01:00</updated><id>http://localhost:4000/blog/compression-in-hadoop</id><content type="html" xml:base="http://localhost:4000/blog/compression-in-hadoop/">&lt;p&gt;Compression will help to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;save storage&lt;/li&gt;
  &lt;li&gt;reduce io cost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: compression and uncompression adds some cost as cpu resources will be used but io cost is saved more comparatively.&lt;/p&gt;

&lt;h3 id=&quot;compression-techniques&quot;&gt;Compression techniques&lt;/h3&gt;

&lt;p&gt;some compression codes are optimized for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;storage&lt;/li&gt;
  &lt;li&gt;speed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;snappy&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fast compression codec&lt;/li&gt;
  &lt;li&gt;optimized for speed rather than storage&lt;/li&gt;
  &lt;li&gt;by default is not splittable but file format like avro/orc/parquet takes care of splits. So snappy can be used with these file formats.&lt;/li&gt;
  &lt;li&gt;distributed with hadoop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;lzo&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;optimized for speed rather than storage&lt;/li&gt;
  &lt;li&gt;it is splittable but requires additional indexing step&lt;/li&gt;
  &lt;li&gt;good for plain text files&lt;/li&gt;
  &lt;li&gt;is not distributed with hadoop, requires seperate install&lt;/li&gt;
  &lt;li&gt;compratively slower than snappy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;gzip&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;optimized for storage, 2.5x times compression compared to snappy&lt;/li&gt;
  &lt;li&gt;not splittable but can be used with container file formats like snappy&lt;/li&gt;
  &lt;li&gt;processing is slow, as compression is more it will have less blocks, can reduce block size to increase parellelism which will process faster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;bzip2&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;excellent storage, compress around 9% more comparitively to gzip&lt;/li&gt;
  &lt;li&gt;significantly slower, around 10x comparitively to gzip&lt;/li&gt;
  &lt;li&gt;splittable&lt;/li&gt;
  &lt;li&gt;might be used for archival&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: snappy is used in mostly, as it provides good trade off between speed and size.&lt;/p&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/bio-photo.jpg&quot;, &quot;bio&quot;=&gt;&quot;Senior Data Engineer&quot;, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;, &quot;url&quot;=&gt;&quot;https://khuranabal.github.io/&quot;}, {&quot;label&quot;=&gt;&quot;Linkedin&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-linkedin&quot;, &quot;url&quot;=&gt;&quot;https://www.linkedin.com/in/balpreet-singh-654705114&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;, &quot;url&quot;=&gt;&quot;https://github.com/khuranabal?tab=repositories&quot;}]}</name></author><category term="blog" /><category term="compression" /><category term="hadoop" /><summary type="html">Compression will help to: save storage reduce io cost</summary></entry></feed>